// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package gpuprint

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type GpuprintGpuKernelLaunchEventT struct {
	_            structs.HostLayout
	Flag         uint8
	Pad          [3]uint8
	Pid          uint32
	Comm         [150]uint8
	_            [2]byte
	Gridx        uint32
	Gridy        uint32
	Gridz        uint32
	Blockx       uint32
	Blocky       uint32
	Blockz       uint32
	TotalBlocks  uint64
	ThreadsBlock uint64
	TotalThreads uint64
}

type GpuprintGpuMemallocEventT struct {
	_        structs.HostLayout
	Flag     uint8
	Pad      [3]uint8
	Pid      uint32
	Comm     [150]uint8
	_        [2]byte
	ByteSize uint64
}

type GpuprintGpuMemcpyEventT struct {
	_        structs.HostLayout
	Flag     uint8
	Pad      [3]uint8
	Pid      uint32
	Comm     [150]uint8
	_        [2]byte
	ByteSize uint64
	Kind     uint8
	_        [7]byte
}

type GpuprintGpuStreamEventT struct {
	_         structs.HostLayout
	Flag      uint8
	Pad       [3]uint8
	Pid       uint32
	Comm      [150]uint8
	_         [2]byte
	StartTime uint64
	EndTime   uint64
	DeltaNs   uint64
}

// LoadGpuprint returns the embedded CollectionSpec for Gpuprint.
func LoadGpuprint() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_GpuprintBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Gpuprint: %w", err)
	}

	return spec, err
}

// LoadGpuprintObjects loads Gpuprint and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*GpuprintObjects
//	*GpuprintPrograms
//	*GpuprintMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadGpuprintObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadGpuprint()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// GpuprintSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GpuprintSpecs struct {
	GpuprintProgramSpecs
	GpuprintMapSpecs
	GpuprintVariableSpecs
}

// GpuprintProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GpuprintProgramSpecs struct {
	HandleCuLaunchkernel         *ebpf.ProgramSpec `ebpf:"handle_cuLaunchkernel"`
	HandleCuMemAlloc             *ebpf.ProgramSpec `ebpf:"handle_cuMemAlloc"`
	HandleCuMemcpyDtoh           *ebpf.ProgramSpec `ebpf:"handle_cuMemcpy_dtoh"`
	HandleCuMemcpyDtohAsync      *ebpf.ProgramSpec `ebpf:"handle_cuMemcpy_dtohAsync"`
	HandleCuMemcpyHtod           *ebpf.ProgramSpec `ebpf:"handle_cuMemcpy_htod"`
	HandleCuMemcpyHtodAsync      *ebpf.ProgramSpec `ebpf:"handle_cuMemcpy_htod_async"`
	HandleCuStreamSync           *ebpf.ProgramSpec `ebpf:"handle_cuStreamSync"`
	HandleCuStreamSynchronizeRet *ebpf.ProgramSpec `ebpf:"handle_cuStreamSynchronize_ret"`
}

// GpuprintMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GpuprintMapSpecs struct {
	GpuRingbuf        *ebpf.MapSpec `ebpf:"gpu_ringbuf"`
	StartEventsStream *ebpf.MapSpec `ebpf:"start_events_stream"`
}

// GpuprintVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GpuprintVariableSpecs struct {
	Unused  *ebpf.VariableSpec `ebpf:"unused"`
	Unused2 *ebpf.VariableSpec `ebpf:"unused2"`
	Unused3 *ebpf.VariableSpec `ebpf:"unused3"`
	Unused4 *ebpf.VariableSpec `ebpf:"unused4"`
}

// GpuprintObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadGpuprintObjects or ebpf.CollectionSpec.LoadAndAssign.
type GpuprintObjects struct {
	GpuprintPrograms
	GpuprintMaps
	GpuprintVariables
}

func (o *GpuprintObjects) Close() error {
	return _GpuprintClose(
		&o.GpuprintPrograms,
		&o.GpuprintMaps,
	)
}

// GpuprintMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadGpuprintObjects or ebpf.CollectionSpec.LoadAndAssign.
type GpuprintMaps struct {
	GpuRingbuf        *ebpf.Map `ebpf:"gpu_ringbuf"`
	StartEventsStream *ebpf.Map `ebpf:"start_events_stream"`
}

func (m *GpuprintMaps) Close() error {
	return _GpuprintClose(
		m.GpuRingbuf,
		m.StartEventsStream,
	)
}

// GpuprintVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadGpuprintObjects or ebpf.CollectionSpec.LoadAndAssign.
type GpuprintVariables struct {
	Unused  *ebpf.Variable `ebpf:"unused"`
	Unused2 *ebpf.Variable `ebpf:"unused2"`
	Unused3 *ebpf.Variable `ebpf:"unused3"`
	Unused4 *ebpf.Variable `ebpf:"unused4"`
}

// GpuprintPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadGpuprintObjects or ebpf.CollectionSpec.LoadAndAssign.
type GpuprintPrograms struct {
	HandleCuLaunchkernel         *ebpf.Program `ebpf:"handle_cuLaunchkernel"`
	HandleCuMemAlloc             *ebpf.Program `ebpf:"handle_cuMemAlloc"`
	HandleCuMemcpyDtoh           *ebpf.Program `ebpf:"handle_cuMemcpy_dtoh"`
	HandleCuMemcpyDtohAsync      *ebpf.Program `ebpf:"handle_cuMemcpy_dtohAsync"`
	HandleCuMemcpyHtod           *ebpf.Program `ebpf:"handle_cuMemcpy_htod"`
	HandleCuMemcpyHtodAsync      *ebpf.Program `ebpf:"handle_cuMemcpy_htod_async"`
	HandleCuStreamSync           *ebpf.Program `ebpf:"handle_cuStreamSync"`
	HandleCuStreamSynchronizeRet *ebpf.Program `ebpf:"handle_cuStreamSynchronize_ret"`
}

func (p *GpuprintPrograms) Close() error {
	return _GpuprintClose(
		p.HandleCuLaunchkernel,
		p.HandleCuMemAlloc,
		p.HandleCuMemcpyDtoh,
		p.HandleCuMemcpyDtohAsync,
		p.HandleCuMemcpyHtod,
		p.HandleCuMemcpyHtodAsync,
		p.HandleCuStreamSync,
		p.HandleCuStreamSynchronizeRet,
	)
}

func _GpuprintClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed gpuprint_x86_bpfel.o
var _GpuprintBytes []byte
