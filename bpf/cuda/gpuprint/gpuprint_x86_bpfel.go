// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package gpuprint

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type GpuprintGpuEventT struct {
	_            structs.HostLayout
	Pid          uint32
	Comm         [150]uint8
	_            [6]byte
	TotalBlocks  uint64
	ThreadsBlock uint64
	TotalThreads uint64
}

// LoadGpuprint returns the embedded CollectionSpec for Gpuprint.
func LoadGpuprint() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_GpuprintBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Gpuprint: %w", err)
	}

	return spec, err
}

// LoadGpuprintObjects loads Gpuprint and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*GpuprintObjects
//	*GpuprintPrograms
//	*GpuprintMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadGpuprintObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadGpuprint()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// GpuprintSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GpuprintSpecs struct {
	GpuprintProgramSpecs
	GpuprintMapSpecs
	GpuprintVariableSpecs
}

// GpuprintProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GpuprintProgramSpecs struct {
	HandleCudaLaunchkernel *ebpf.ProgramSpec `ebpf:"handle_cuda_launchkernel"`
}

// GpuprintMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GpuprintMapSpecs struct {
	GpuRingbuf *ebpf.MapSpec `ebpf:"gpu_ringbuf"`
}

// GpuprintVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GpuprintVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// GpuprintObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadGpuprintObjects or ebpf.CollectionSpec.LoadAndAssign.
type GpuprintObjects struct {
	GpuprintPrograms
	GpuprintMaps
	GpuprintVariables
}

func (o *GpuprintObjects) Close() error {
	return _GpuprintClose(
		&o.GpuprintPrograms,
		&o.GpuprintMaps,
	)
}

// GpuprintMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadGpuprintObjects or ebpf.CollectionSpec.LoadAndAssign.
type GpuprintMaps struct {
	GpuRingbuf *ebpf.Map `ebpf:"gpu_ringbuf"`
}

func (m *GpuprintMaps) Close() error {
	return _GpuprintClose(
		m.GpuRingbuf,
	)
}

// GpuprintVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadGpuprintObjects or ebpf.CollectionSpec.LoadAndAssign.
type GpuprintVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// GpuprintPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadGpuprintObjects or ebpf.CollectionSpec.LoadAndAssign.
type GpuprintPrograms struct {
	HandleCudaLaunchkernel *ebpf.Program `ebpf:"handle_cuda_launchkernel"`
}

func (p *GpuprintPrograms) Close() error {
	return _GpuprintClose(
		p.HandleCudaLaunchkernel,
	)
}

func _GpuprintClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed gpuprint_x86_bpfel.o
var _GpuprintBytes []byte
