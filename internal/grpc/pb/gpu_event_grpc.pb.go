// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: gpu_event.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GpuEventCollector_SendBatch_FullMethodName = "/pb.GpuEventCollector/SendBatch"
)

// GpuEventCollectorClient is the client API for GpuEventCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GpuEventCollectorClient interface {
	SendBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*CollectorAck, error)
}

type gpuEventCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewGpuEventCollectorClient(cc grpc.ClientConnInterface) GpuEventCollectorClient {
	return &gpuEventCollectorClient{cc}
}

func (c *gpuEventCollectorClient) SendBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*CollectorAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectorAck)
	err := c.cc.Invoke(ctx, GpuEventCollector_SendBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GpuEventCollectorServer is the server API for GpuEventCollector service.
// All implementations must embed UnimplementedGpuEventCollectorServer
// for forward compatibility.
type GpuEventCollectorServer interface {
	SendBatch(context.Context, *Batch) (*CollectorAck, error)
	mustEmbedUnimplementedGpuEventCollectorServer()
}

// UnimplementedGpuEventCollectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGpuEventCollectorServer struct{}

func (UnimplementedGpuEventCollectorServer) SendBatch(context.Context, *Batch) (*CollectorAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBatch not implemented")
}
func (UnimplementedGpuEventCollectorServer) mustEmbedUnimplementedGpuEventCollectorServer() {}
func (UnimplementedGpuEventCollectorServer) testEmbeddedByValue()                           {}

// UnsafeGpuEventCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GpuEventCollectorServer will
// result in compilation errors.
type UnsafeGpuEventCollectorServer interface {
	mustEmbedUnimplementedGpuEventCollectorServer()
}

func RegisterGpuEventCollectorServer(s grpc.ServiceRegistrar, srv GpuEventCollectorServer) {
	// If the following call pancis, it indicates UnimplementedGpuEventCollectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GpuEventCollector_ServiceDesc, srv)
}

func _GpuEventCollector_SendBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuEventCollectorServer).SendBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuEventCollector_SendBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuEventCollectorServer).SendBatch(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

// GpuEventCollector_ServiceDesc is the grpc.ServiceDesc for GpuEventCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GpuEventCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GpuEventCollector",
	HandlerType: (*GpuEventCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBatch",
			Handler:    _GpuEventCollector_SendBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpu_event.proto",
}
