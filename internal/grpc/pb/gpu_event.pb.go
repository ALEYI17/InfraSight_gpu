// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.26.1
// source: gpu_event.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GpuEventType int32

const (
	GpuEventType_EVENT_UNKNOWN       GpuEventType = 0
	GpuEventType_EVENT_KERNEL_LAUNCH GpuEventType = 1
	GpuEventType_EVENT_MEMALLOC      GpuEventType = 2
	GpuEventType_EVENT_MEMCPY        GpuEventType = 3
	GpuEventType_EVENT_STREAM_SYNC   GpuEventType = 4
)

// Enum value maps for GpuEventType.
var (
	GpuEventType_name = map[int32]string{
		0: "EVENT_UNKNOWN",
		1: "EVENT_KERNEL_LAUNCH",
		2: "EVENT_MEMALLOC",
		3: "EVENT_MEMCPY",
		4: "EVENT_STREAM_SYNC",
	}
	GpuEventType_value = map[string]int32{
		"EVENT_UNKNOWN":       0,
		"EVENT_KERNEL_LAUNCH": 1,
		"EVENT_MEMALLOC":      2,
		"EVENT_MEMCPY":        3,
		"EVENT_STREAM_SYNC":   4,
	}
)

func (x GpuEventType) Enum() *GpuEventType {
	p := new(GpuEventType)
	*p = x
	return p
}

func (x GpuEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpuEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_event_proto_enumTypes[0].Descriptor()
}

func (GpuEventType) Type() protoreflect.EnumType {
	return &file_gpu_event_proto_enumTypes[0]
}

func (x GpuEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GpuEventType.Descriptor instead.
func (GpuEventType) EnumDescriptor() ([]byte, []int) {
	return file_gpu_event_proto_rawDescGZIP(), []int{0}
}

type GpuEvent struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Pid       uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Comm      string                 `protobuf:"bytes,2,opt,name=comm,proto3" json:"comm,omitempty"`
	EventType string                 `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*GpuEvent_Token
	//	*GpuEvent_Tw
	Payload       isGpuEvent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GpuEvent) Reset() {
	*x = GpuEvent{}
	mi := &file_gpu_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GpuEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuEvent) ProtoMessage() {}

func (x *GpuEvent) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuEvent.ProtoReflect.Descriptor instead.
func (*GpuEvent) Descriptor() ([]byte, []int) {
	return file_gpu_event_proto_rawDescGZIP(), []int{0}
}

func (x *GpuEvent) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *GpuEvent) GetComm() string {
	if x != nil {
		return x.Comm
	}
	return ""
}

func (x *GpuEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *GpuEvent) GetPayload() isGpuEvent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GpuEvent) GetToken() *GpuEventToken {
	if x != nil {
		if x, ok := x.Payload.(*GpuEvent_Token); ok {
			return x.Token
		}
	}
	return nil
}

func (x *GpuEvent) GetTw() *GpuTimeWindow {
	if x != nil {
		if x, ok := x.Payload.(*GpuEvent_Tw); ok {
			return x.Tw
		}
	}
	return nil
}

type isGpuEvent_Payload interface {
	isGpuEvent_Payload()
}

type GpuEvent_Token struct {
	Token *GpuEventToken `protobuf:"bytes,4,opt,name=token,proto3,oneof"`
}

type GpuEvent_Tw struct {
	Tw *GpuTimeWindow `protobuf:"bytes,5,opt,name=tw,proto3,oneof"`
}

func (*GpuEvent_Token) isGpuEvent_Payload() {}

func (*GpuEvent_Tw) isGpuEvent_Payload() {}

type GpuEventToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EventType     GpuEventType           `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=pb.GpuEventType" json:"event_type,omitempty"`
	Value         float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Dir           int64                  `protobuf:"varint,4,opt,name=dir,proto3" json:"dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GpuEventToken) Reset() {
	*x = GpuEventToken{}
	mi := &file_gpu_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GpuEventToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuEventToken) ProtoMessage() {}

func (x *GpuEventToken) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuEventToken.ProtoReflect.Descriptor instead.
func (*GpuEventToken) Descriptor() ([]byte, []int) {
	return file_gpu_event_proto_rawDescGZIP(), []int{1}
}

func (x *GpuEventToken) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GpuEventToken) GetEventType() GpuEventType {
	if x != nil {
		return x.EventType
	}
	return GpuEventType_EVENT_UNKNOWN
}

func (x *GpuEventToken) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GpuEventToken) GetDir() int64 {
	if x != nil {
		return x.Dir
	}
	return 0
}

type GpuTimeWindow struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	WindowStartNs        int64                  `protobuf:"varint,1,opt,name=window_start_ns,json=windowStartNs,proto3" json:"window_start_ns,omitempty"`
	WindowEndNs          int64                  `protobuf:"varint,2,opt,name=window_end_ns,json=windowEndNs,proto3" json:"window_end_ns,omitempty"`
	KernelLaunchCount    uint64                 `protobuf:"varint,3,opt,name=kernel_launch_count,json=kernelLaunchCount,proto3" json:"kernel_launch_count,omitempty"`
	MemAllocCount        uint64                 `protobuf:"varint,4,opt,name=mem_alloc_count,json=memAllocCount,proto3" json:"mem_alloc_count,omitempty"`
	MemcpyCount          uint64                 `protobuf:"varint,5,opt,name=memcpy_count,json=memcpyCount,proto3" json:"memcpy_count,omitempty"`
	StreamSyncCount      uint64                 `protobuf:"varint,6,opt,name=stream_sync_count,json=streamSyncCount,proto3" json:"stream_sync_count,omitempty"`
	AvgThreadsPerKernel  float64                `protobuf:"fixed64,7,opt,name=avg_threads_per_kernel,json=avgThreadsPerKernel,proto3" json:"avg_threads_per_kernel,omitempty"`
	MaxThreadsPerKernel  uint64                 `protobuf:"varint,8,opt,name=max_threads_per_kernel,json=maxThreadsPerKernel,proto3" json:"max_threads_per_kernel,omitempty"`
	AvgBlocksPerKernel   float64                `protobuf:"fixed64,9,opt,name=avg_blocks_per_kernel,json=avgBlocksPerKernel,proto3" json:"avg_blocks_per_kernel,omitempty"`
	TotalThreadsLaunched uint64                 `protobuf:"varint,10,opt,name=total_threads_launched,json=totalThreadsLaunched,proto3" json:"total_threads_launched,omitempty"`
	TotalMemAllocBytes   uint64                 `protobuf:"varint,11,opt,name=total_mem_alloc_bytes,json=totalMemAllocBytes,proto3" json:"total_mem_alloc_bytes,omitempty"`
	AvgMemAllocBytes     float64                `protobuf:"fixed64,12,opt,name=avg_mem_alloc_bytes,json=avgMemAllocBytes,proto3" json:"avg_mem_alloc_bytes,omitempty"`
	TotalMemcpyBytes     uint64                 `protobuf:"varint,13,opt,name=total_memcpy_bytes,json=totalMemcpyBytes,proto3" json:"total_memcpy_bytes,omitempty"`
	AvgMemcpyBytes       float64                `protobuf:"fixed64,14,opt,name=avg_memcpy_bytes,json=avgMemcpyBytes,proto3" json:"avg_memcpy_bytes,omitempty"`
	HtodBytes            uint64                 `protobuf:"varint,15,opt,name=htod_bytes,json=htodBytes,proto3" json:"htod_bytes,omitempty"`
	DtohBytes            uint64                 `protobuf:"varint,16,opt,name=dtoh_bytes,json=dtohBytes,proto3" json:"dtoh_bytes,omitempty"`
	HtodRatio            float64                `protobuf:"fixed64,17,opt,name=htod_ratio,json=htodRatio,proto3" json:"htod_ratio,omitempty"`
	AvgSyncTimeNs        float64                `protobuf:"fixed64,18,opt,name=avg_sync_time_ns,json=avgSyncTimeNs,proto3" json:"avg_sync_time_ns,omitempty"`
	MaxSyncTimeNs        uint64                 `protobuf:"varint,19,opt,name=max_sync_time_ns,json=maxSyncTimeNs,proto3" json:"max_sync_time_ns,omitempty"`
	SyncFraction         float64                `protobuf:"fixed64,20,opt,name=sync_fraction,json=syncFraction,proto3" json:"sync_fraction,omitempty"`
	LaunchRate           float64                `protobuf:"fixed64,21,opt,name=launch_rate,json=launchRate,proto3" json:"launch_rate,omitempty"`
	MemcpyRate           float64                `protobuf:"fixed64,22,opt,name=memcpy_rate,json=memcpyRate,proto3" json:"memcpy_rate,omitempty"`
	AllocRate            float64                `protobuf:"fixed64,23,opt,name=alloc_rate,json=allocRate,proto3" json:"alloc_rate,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GpuTimeWindow) Reset() {
	*x = GpuTimeWindow{}
	mi := &file_gpu_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GpuTimeWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuTimeWindow) ProtoMessage() {}

func (x *GpuTimeWindow) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuTimeWindow.ProtoReflect.Descriptor instead.
func (*GpuTimeWindow) Descriptor() ([]byte, []int) {
	return file_gpu_event_proto_rawDescGZIP(), []int{2}
}

func (x *GpuTimeWindow) GetWindowStartNs() int64 {
	if x != nil {
		return x.WindowStartNs
	}
	return 0
}

func (x *GpuTimeWindow) GetWindowEndNs() int64 {
	if x != nil {
		return x.WindowEndNs
	}
	return 0
}

func (x *GpuTimeWindow) GetKernelLaunchCount() uint64 {
	if x != nil {
		return x.KernelLaunchCount
	}
	return 0
}

func (x *GpuTimeWindow) GetMemAllocCount() uint64 {
	if x != nil {
		return x.MemAllocCount
	}
	return 0
}

func (x *GpuTimeWindow) GetMemcpyCount() uint64 {
	if x != nil {
		return x.MemcpyCount
	}
	return 0
}

func (x *GpuTimeWindow) GetStreamSyncCount() uint64 {
	if x != nil {
		return x.StreamSyncCount
	}
	return 0
}

func (x *GpuTimeWindow) GetAvgThreadsPerKernel() float64 {
	if x != nil {
		return x.AvgThreadsPerKernel
	}
	return 0
}

func (x *GpuTimeWindow) GetMaxThreadsPerKernel() uint64 {
	if x != nil {
		return x.MaxThreadsPerKernel
	}
	return 0
}

func (x *GpuTimeWindow) GetAvgBlocksPerKernel() float64 {
	if x != nil {
		return x.AvgBlocksPerKernel
	}
	return 0
}

func (x *GpuTimeWindow) GetTotalThreadsLaunched() uint64 {
	if x != nil {
		return x.TotalThreadsLaunched
	}
	return 0
}

func (x *GpuTimeWindow) GetTotalMemAllocBytes() uint64 {
	if x != nil {
		return x.TotalMemAllocBytes
	}
	return 0
}

func (x *GpuTimeWindow) GetAvgMemAllocBytes() float64 {
	if x != nil {
		return x.AvgMemAllocBytes
	}
	return 0
}

func (x *GpuTimeWindow) GetTotalMemcpyBytes() uint64 {
	if x != nil {
		return x.TotalMemcpyBytes
	}
	return 0
}

func (x *GpuTimeWindow) GetAvgMemcpyBytes() float64 {
	if x != nil {
		return x.AvgMemcpyBytes
	}
	return 0
}

func (x *GpuTimeWindow) GetHtodBytes() uint64 {
	if x != nil {
		return x.HtodBytes
	}
	return 0
}

func (x *GpuTimeWindow) GetDtohBytes() uint64 {
	if x != nil {
		return x.DtohBytes
	}
	return 0
}

func (x *GpuTimeWindow) GetHtodRatio() float64 {
	if x != nil {
		return x.HtodRatio
	}
	return 0
}

func (x *GpuTimeWindow) GetAvgSyncTimeNs() float64 {
	if x != nil {
		return x.AvgSyncTimeNs
	}
	return 0
}

func (x *GpuTimeWindow) GetMaxSyncTimeNs() uint64 {
	if x != nil {
		return x.MaxSyncTimeNs
	}
	return 0
}

func (x *GpuTimeWindow) GetSyncFraction() float64 {
	if x != nil {
		return x.SyncFraction
	}
	return 0
}

func (x *GpuTimeWindow) GetLaunchRate() float64 {
	if x != nil {
		return x.LaunchRate
	}
	return 0
}

func (x *GpuTimeWindow) GetMemcpyRate() float64 {
	if x != nil {
		return x.MemcpyRate
	}
	return 0
}

func (x *GpuTimeWindow) GetAllocRate() float64 {
	if x != nil {
		return x.AllocRate
	}
	return 0
}

type CollectorAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,68,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,69,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectorAck) Reset() {
	*x = CollectorAck{}
	mi := &file_gpu_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectorAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorAck) ProtoMessage() {}

func (x *CollectorAck) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorAck.ProtoReflect.Descriptor instead.
func (*CollectorAck) Descriptor() ([]byte, []int) {
	return file_gpu_event_proto_rawDescGZIP(), []int{3}
}

func (x *CollectorAck) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CollectorAck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GpuBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	Batch         []*GpuEvent            `protobuf:"bytes,11,rep,name=batch,proto3" json:"batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GpuBatch) Reset() {
	*x = GpuBatch{}
	mi := &file_gpu_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GpuBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuBatch) ProtoMessage() {}

func (x *GpuBatch) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuBatch.ProtoReflect.Descriptor instead.
func (*GpuBatch) Descriptor() ([]byte, []int) {
	return file_gpu_event_proto_rawDescGZIP(), []int{4}
}

func (x *GpuBatch) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GpuBatch) GetBatch() []*GpuEvent {
	if x != nil {
		return x.Batch
	}
	return nil
}

var File_gpu_event_proto protoreflect.FileDescriptor

const file_gpu_event_proto_rawDesc = "" +
	"\n" +
	"\x0fgpu_event.proto\x12\x02pb\"\xaa\x01\n" +
	"\bGpuEvent\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12\x12\n" +
	"\x04comm\x18\x02 \x01(\tR\x04comm\x12\x1d\n" +
	"\n" +
	"event_type\x18\x03 \x01(\tR\teventType\x12)\n" +
	"\x05token\x18\x04 \x01(\v2\x11.pb.GpuEventTokenH\x00R\x05token\x12#\n" +
	"\x02tw\x18\x05 \x01(\v2\x11.pb.GpuTimeWindowH\x00R\x02twB\t\n" +
	"\apayload\"\x86\x01\n" +
	"\rGpuEventToken\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x12/\n" +
	"\n" +
	"event_type\x18\x02 \x01(\x0e2\x10.pb.GpuEventTypeR\teventType\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x01R\x05value\x12\x10\n" +
	"\x03dir\x18\x04 \x01(\x03R\x03dir\"\xc4\a\n" +
	"\rGpuTimeWindow\x12&\n" +
	"\x0fwindow_start_ns\x18\x01 \x01(\x03R\rwindowStartNs\x12\"\n" +
	"\rwindow_end_ns\x18\x02 \x01(\x03R\vwindowEndNs\x12.\n" +
	"\x13kernel_launch_count\x18\x03 \x01(\x04R\x11kernelLaunchCount\x12&\n" +
	"\x0fmem_alloc_count\x18\x04 \x01(\x04R\rmemAllocCount\x12!\n" +
	"\fmemcpy_count\x18\x05 \x01(\x04R\vmemcpyCount\x12*\n" +
	"\x11stream_sync_count\x18\x06 \x01(\x04R\x0fstreamSyncCount\x123\n" +
	"\x16avg_threads_per_kernel\x18\a \x01(\x01R\x13avgThreadsPerKernel\x123\n" +
	"\x16max_threads_per_kernel\x18\b \x01(\x04R\x13maxThreadsPerKernel\x121\n" +
	"\x15avg_blocks_per_kernel\x18\t \x01(\x01R\x12avgBlocksPerKernel\x124\n" +
	"\x16total_threads_launched\x18\n" +
	" \x01(\x04R\x14totalThreadsLaunched\x121\n" +
	"\x15total_mem_alloc_bytes\x18\v \x01(\x04R\x12totalMemAllocBytes\x12-\n" +
	"\x13avg_mem_alloc_bytes\x18\f \x01(\x01R\x10avgMemAllocBytes\x12,\n" +
	"\x12total_memcpy_bytes\x18\r \x01(\x04R\x10totalMemcpyBytes\x12(\n" +
	"\x10avg_memcpy_bytes\x18\x0e \x01(\x01R\x0eavgMemcpyBytes\x12\x1d\n" +
	"\n" +
	"htod_bytes\x18\x0f \x01(\x04R\thtodBytes\x12\x1d\n" +
	"\n" +
	"dtoh_bytes\x18\x10 \x01(\x04R\tdtohBytes\x12\x1d\n" +
	"\n" +
	"htod_ratio\x18\x11 \x01(\x01R\thtodRatio\x12'\n" +
	"\x10avg_sync_time_ns\x18\x12 \x01(\x01R\ravgSyncTimeNs\x12'\n" +
	"\x10max_sync_time_ns\x18\x13 \x01(\x04R\rmaxSyncTimeNs\x12#\n" +
	"\rsync_fraction\x18\x14 \x01(\x01R\fsyncFraction\x12\x1f\n" +
	"\vlaunch_rate\x18\x15 \x01(\x01R\n" +
	"launchRate\x12\x1f\n" +
	"\vmemcpy_rate\x18\x16 \x01(\x01R\n" +
	"memcpyRate\x12\x1d\n" +
	"\n" +
	"alloc_rate\x18\x17 \x01(\x01R\tallocRate\"@\n" +
	"\fCollectorAck\x12\x16\n" +
	"\x06status\x18D \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18E \x01(\tR\amessage\"B\n" +
	"\bGpuBatch\x12\x12\n" +
	"\x04type\x18\n" +
	" \x01(\tR\x04type\x12\"\n" +
	"\x05batch\x18\v \x03(\v2\f.pb.GpuEventR\x05batch*w\n" +
	"\fGpuEventType\x12\x11\n" +
	"\rEVENT_UNKNOWN\x10\x00\x12\x17\n" +
	"\x13EVENT_KERNEL_LAUNCH\x10\x01\x12\x12\n" +
	"\x0eEVENT_MEMALLOC\x10\x02\x12\x10\n" +
	"\fEVENT_MEMCPY\x10\x03\x12\x15\n" +
	"\x11EVENT_STREAM_SYNC\x10\x042C\n" +
	"\x11GpuEventCollector\x12.\n" +
	"\fSendGpuBatch\x12\f.pb.GpuBatch\x1a\x10.pb.CollectorAckB7Z5github.com/ALEYI17/InfraSight_gpu/internal/grpc/pb;pbb\x06proto3"

var (
	file_gpu_event_proto_rawDescOnce sync.Once
	file_gpu_event_proto_rawDescData []byte
)

func file_gpu_event_proto_rawDescGZIP() []byte {
	file_gpu_event_proto_rawDescOnce.Do(func() {
		file_gpu_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gpu_event_proto_rawDesc), len(file_gpu_event_proto_rawDesc)))
	})
	return file_gpu_event_proto_rawDescData
}

var file_gpu_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gpu_event_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_gpu_event_proto_goTypes = []any{
	(GpuEventType)(0),     // 0: pb.GpuEventType
	(*GpuEvent)(nil),      // 1: pb.GpuEvent
	(*GpuEventToken)(nil), // 2: pb.GpuEventToken
	(*GpuTimeWindow)(nil), // 3: pb.GpuTimeWindow
	(*CollectorAck)(nil),  // 4: pb.CollectorAck
	(*GpuBatch)(nil),      // 5: pb.GpuBatch
}
var file_gpu_event_proto_depIdxs = []int32{
	2, // 0: pb.GpuEvent.token:type_name -> pb.GpuEventToken
	3, // 1: pb.GpuEvent.tw:type_name -> pb.GpuTimeWindow
	0, // 2: pb.GpuEventToken.event_type:type_name -> pb.GpuEventType
	1, // 3: pb.GpuBatch.batch:type_name -> pb.GpuEvent
	5, // 4: pb.GpuEventCollector.SendGpuBatch:input_type -> pb.GpuBatch
	4, // 5: pb.GpuEventCollector.SendGpuBatch:output_type -> pb.CollectorAck
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_gpu_event_proto_init() }
func file_gpu_event_proto_init() {
	if File_gpu_event_proto != nil {
		return
	}
	file_gpu_event_proto_msgTypes[0].OneofWrappers = []any{
		(*GpuEvent_Token)(nil),
		(*GpuEvent_Tw)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gpu_event_proto_rawDesc), len(file_gpu_event_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gpu_event_proto_goTypes,
		DependencyIndexes: file_gpu_event_proto_depIdxs,
		EnumInfos:         file_gpu_event_proto_enumTypes,
		MessageInfos:      file_gpu_event_proto_msgTypes,
	}.Build()
	File_gpu_event_proto = out.File
	file_gpu_event_proto_goTypes = nil
	file_gpu_event_proto_depIdxs = nil
}
